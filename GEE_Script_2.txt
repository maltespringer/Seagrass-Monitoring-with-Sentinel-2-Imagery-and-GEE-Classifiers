// GEE Inputs
var roi = 'Vector of area of interest'
var AOI_only_Water = 'Vector of adapted coastline file
var taubmean = 'shear stress data from folmer et al. (2017)'
var slope = 'raster data of area slope'
var expmean = 'raster data containing the exposition time'
var SG_l_60 = 'flight data polys with sparse seagrass'
var SG_m_60 = 'flight data polys with dense seagrass'
var BEF_class = 'rasterized flight data'
var msg = 'mean size of graines from the AufMod project'
var Kuestenvegetation = 'digitized polys of coastal vegetation'
var Muschelbaenke = 'digitized polys of mussel bed'
var Sand = 'digitized polys of sand'
var Watt = 'digitized polys of bare wadden flats'
var Algen = 'digitized polys containing algae'
var SampleFeatures = 'exported preprocessed samples'
var Samples_pure ='exported raw samples'

var date = 'your date'

// Preperation of the image just as in Script 1. Otherwise you can also export the preprocessed image and insert it here
var s2 = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED");

var image = s2.filterBounds(roi)
              .filterDate('the day before your date', 'the day after your date')
              .first();

var image = image.clip(roi);
var image = image.reproject({
  crs: 'EPSG:4326',
  scale: 10
});
print(image);
var image = image.clip(AOI_only_Water);


var classValue = [1, 2, 3, 4, 5, 6, 7];
var classNames = ['Watt', 'Seegras_dicht', 'Seegras_duenn', 'Sand', 'Muschelbaenke', 'Kuestenvegetation', 'Algen'];
var classPalette = ['A52A2A', '006400', '90EE90', 'FFFF00', '800080', '0000FF', 'FF4500'];


// Clip Clouds and water ////////////////////////////////////////////////////////////////////////////////
var qa = image.select('QA60');
var cloud_shadow = qa.bitwiseAnd(1 << 13).neq(0);
var clouds = qa.bitwiseAnd(1 << 10).neq(0);
var cloud_mask = cloud_shadow.or(clouds);
var cloud_uni = cloud_mask.eq(0).selfMask();
var image = image.updateMask(cloud_uni);

// NDWI for water clipping
var ndwi = image.normalizedDifference(['B3', 'B8']);
var ndwiParams = {min: -1, max: 1, palette: ['green', 'white', 'blue']};
Map.addLayer(ndwi, ndwiParams, 'NDWI');
var ndwiThreshold = ndwi.lt(0.0);
var ndwiMask = ndwiThreshold.updateMask(ndwiThreshold);
var image = image.updateMask(ndwiMask);

Map.addLayer(image, {bands: ['B8', 'B4', 'B3'], max: 2000}, 'NDWI + Cloud Masked');

var ndvi = image.normalizedDifference(['B8', 'B4']);
var ndviParams = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.addLayer(ndvi, ndviParams, 'NDVI');

image = image.addBands(ndvi);

function addIndices(image) {
  var nir = image.select('B8');
  var red = image.select('B4');
  var red_edge = image.select('B5');
  var green = image.select('B3');
  var swir = image.select('B11');
  var L = 0.5;

  var fai = red.add(nir.subtract(red).multiply(705).divide(842 - 665)).subtract(red_edge).rename('FAI');
  
  var savi = image.expression(
    '((NIR - RED) / (NIR + RED + L)) * (1 + L)', {
      'NIR': nir,
      'RED': red,
      'L': L
    }).rename('SAVI');
  
  var ndavi = image.normalizedDifference(['B8', 'B2']).rename('NDAVI');
  var mndwi = image.normalizedDifference(['B3', 'B11']).rename('MNDWI');
  
  var wavi = image.expression(
    '(NIR - (RED + 0.5 * SWIR)) / (NIR + (RED + 0.5 * SWIR))', {
      'NIR': nir,
      'RED': red,
      'SWIR': swir
    }).rename('WAVI');
    
  var avi = image.expression(
    '(NIR - GREEN) / (NIR + GREEN + 0.16)', {
      'NIR': nir,
      'GREEN': green
    }).rename('AVI');
  
  return image.addBands(fai).addBands(savi).addBands(ndavi).addBands(mndwi).addBands(wavi).addBands(avi);
}

var image = addIndices(image);

var bandnames = ['B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B9', 'B11', 'B12', 'nd', 'FAI', 'SAVI', 'NDAVI', 'MNDWI', 'WAVI', 'AVI']
image = image.select(bandnames);

image = image.addBands(expmean).addBands(taubmean).addBands(slope).addBands(msg);

var oldnames = ['B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B9', 'B11', 'B12', 'nd', 'FAI', 'SAVI', 'NDAVI', 'MNDWI', 'WAVI', 'AVI', 'b1', 'b1_1', 'b1_2', 'b1_3']
var newnames = ['B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B9', 'B11', 'B12', 'NDVI', 'FAI', 'SAVI', 'NDAVI', 'MNDWI', 'WAVI', 'AVI', 'EXPMEAN', 'TAUBMEAN', 'SLOPE', 'MSG']

image = image.select(oldnames, newnames)


var columns = ['B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B9', 'B11', 'B12', 'NDVI', 'FAI', 'SAVI', 'NDAVI', 'MNDWI', 'WAVI', 'AVI', 'classvalue', 'sample'];
var features = ['B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B9', 'B11', 'B12', 'NDVI', 'FAI', 'SAVI', 'NDAVI', 'MNDWI', 'WAVI', 'AVI'];
var train = SampleFeatures.filter(ee.Filter.eq('sample', 'train'));
print('Train sample size', train.size());
var test = SampleFeatures.filter(ee.Filter.eq('sample', 'test'));
print('Test sample size', test.size());


// Use the Samples to classify your image

// CART model /////////////////////////////////////////////////////////////////////////////////
var cart_class = ee.Classifier.smileCart({
  minLeafPopulation : 1
})

var cart = cart_class.train({
  features: train,
  classProperty: 'classvalue',
  inputProperties: features
});
print(cart.explain());

// Test model
var cartm = test.classify(cart, 'predicted').errorMatrix('classvalue', 'predicted');
print('Confusion matrix cart', cartm, 'Accuracy cart', cartm.accuracy(), 'Kappa cart', cartm.kappa(), 'Fscore cart', cartm.fscore());

// Apply model
var lc_cart = image.classify(cart, 'lulc').clip(AOI_only_Water)
  .set('lulc_class_values', classValue, 'lulc_class_palette', classPalette);
Map.addLayer(lc_cart, {}, 'LULC_cart');

// Export the classified image to Google Drive
Export.image.toDrive({
  image: lc_cart,
  description: 'LULC_cart_Classified_6K_' + date,
  folder: 'BA_Classification_6K_' + date, 
  fileNamePrefix: 'LULC_cart_Classified_6K_' + date,
  crs: 'EPSG:4326',
  scale: 10, 
  maxPixels: 1e13,
});

var export_cartm = ee.Feature(null, {matrix: cartm.array()})

Export.table.toDrive({
  collection: ee.FeatureCollection(export_cartm),
  description: 'ConfusionMatrix_CART_' + date,
  folder: 'BA_Classification_6K_' + date,
  fileNamePrefix: 'ConfusionMatrix_CART_' + date,
  fileFormat: 'CSV'
});


  // Random forest model ///////////////////////////////////////////////////////////////////////
  var rf_class = ee.Classifier.smileRandomForest({
    numberOfTrees : 500,
    minLeafPopulation : 1,
    
  })
  
  var rf = rf_class.train(train, 'classvalue', features);
  print(rf.explain());

  // Test model
  var cm = test.classify(rf, 'predicted').errorMatrix('classvalue', 'predicted');
  print('Confusion matrix rf', cm, 'Accuracy rf', cm.accuracy(), 'Kappa rf', cm.kappa(), 'Fscore rf', cm.fscore());

  // Apply model
  var lc_rf = image.classify(rf, 'lulc').clip(AOI_only_Water)
    .set('lulc_class_values', classValue, 'lulc_class_palette', classPalette);
  Map.addLayer(lc_rf, {}, 'LULC_rf');


// Export the classified image to Google Drive
Export.image.toDrive({
  image: lc_rf,
  description: 'LULC_rf_Classified_6K_' + date,
  folder: 'BA_Classification_6K_' + date, 
  fileNamePrefix: 'LULC_rf_Classified_6K_' + date,
  crs: 'EPSG:4326',
  scale: 10, 
  maxPixels: 1e13,
});

var export_rfm = ee.Feature(null, {matrix: cm.array()})

Export.table.toDrive({
  collection: ee.FeatureCollection(export_rfm),
  description: 'ConfusionMatrix_RF_' + date,
  folder: 'BA_Classification_6K_' + date,
  fileNamePrefix: 'ConfusionMatrix_RF_' + date,
  fileFormat: 'CSV'
});

// SVM model ////////////////////////////////////////////////////////////////////////////
var svmClassifier = ee.Classifier.libsvm({
  svmType: 'C_SVC',
  kernelType : 'linear',
  shrinking: true,
});

var svm = svmClassifier.train({
  features: train,
  classProperty: 'classvalue',
  inputProperties: features
});
print(svm.explain());

  // Test model
  var svmm = test.classify(svm, 'predicted').errorMatrix('classvalue', 'predicted');
  print('Confusion matrix svm', svmm, 'Accuracy svm', svmm.accuracy(), 'Kappa svm', svmm.kappa(), 'Fscore svm', svmm.fscore());

  // Apply model
  var lc_svm = image.classify(svm, 'lulc').clip(AOI_only_Water)
    .set('lulc_class_values', classValue, 'lulc_class_palette', classPalette);
  Map.addLayer(lc_svm, {}, 'LULC_svm');
  

// Export the classified image to Google Drive
Export.image.toDrive({
  image: lc_svm,
  description: 'LULC_svm_Classified_6K_' + date,
  folder: 'BA_Classification_6K_' + date, 
  fileNamePrefix: 'LULC_svm_Classified_6K_' + date,
  crs: 'EPSG:4326',
  scale: 10, 
  maxPixels: 1e13,
});

var export_svmm = ee.Feature(null, {matrix: svmm.array()})

Export.table.toDrive({
  collection: ee.FeatureCollection(export_svmm),
  description: 'ConfusionMatrix_SVM_' + date,
  folder: 'BA_Classification_6K_' + date,
  fileNamePrefix: 'ConfusionMatrix_SVM_' + date,
  fileFormat: 'CSV'
});

//KNN model ////////////////////////////////////////////////////////////////////////////////////////
var knn_class = ee.Classifier.smileKNN({
  k : 20,
  searchMethod : "Auto",
  metric : "EUCLIDEAN"
})

var knn = knn_class.train({
  features: train,
  classProperty: 'classvalue',
  inputProperties: features
});
print(knn.explain());

  // Test model
  var knnm = test.classify(knn, 'predicted').errorMatrix('classvalue', 'predicted');
  print('Confusion matrix knn', knnm, 'Accuracy knn', knnm.accuracy(), 'Kappa knn', knnm.kappa(), 'Fscore knn', knnm.fscore());

  // Apply model
  var lc_knn = image.classify(knn, 'lulc').clip(AOI_only_Water)
    .set('lulc_class_values', classValue, 'lulc_class_palette', classPalette);
  Map.addLayer(lc_knn, {}, 'LULC_knn');


// Export the classified image to Google Drive
Export.image.toDrive({
  image: lc_knn,
  description: 'LULC_knn_Classified_6K_' + date,
  folder: 'BA_Classification_6K_' + date,
  fileNamePrefix: 'LULC_knn_Classified_6K_' + date,
  crs: 'EPSG:4326',
  scale: 10,
  maxPixels: 1e13,
});

var export_knnm = ee.Feature(null, {matrix: knnm.array()})

Export.table.toDrive({
  collection: ee.FeatureCollection(export_knnm),
  description: 'ConfusionMatrix_KNN_' + date,
  folder: 'BA_Classification_6K_' + date,
  fileNamePrefix: 'ConfusionMatrix_KNN_' + date,
  fileFormat: 'CSV'
});

// GBT lassifier //////////////////////////////////////////////////////////////////
var gbt_class = ee.Classifier.smileGradientTreeBoost({
  //maxNodes : 100,
  numberOfTrees : 100,
  shrinkage : 0.1,
  samplingRate : 0.9,
  
})

var gbt = gbt_class.train({
  features: train,
  classProperty: 'classvalue',
  inputProperties: features
});
print(gbt.explain());

// Test model
var cm_gbt = test.classify(gbt, 'predicted').errorMatrix('classvalue', 'predicted');
print('Confusion matrix gbt', cm_gbt, 'Accuracy gbt', cm_gbt.accuracy(), 'Kappa gbt', cm_gbt.kappa(), 'Fscore gbt', cm_gbt.fscore());

// Apply model
var lc_gbt = image.classify(gbt, 'lulc').clip(AOI_only_Water)
  .set('lulc_class_values', classValue, 'lulc_class_palette', classPalette);
Map.addLayer(lc_gbt, {}, 'LULC_gbt');

// Export the classified image to Google Drive
Export.image.toDrive({
  image: lc_gbt,
  description: 'LULC_gbt_Classified_6K_' + date,
  folder: 'BA_Classification_6K_' + date,
  fileNamePrefix: 'LULC_gbt_Classified_6K_' + date,
  crs: 'EPSG:4326',
  scale: 10,
  maxPixels: 1e13,
});

var export_gbtm = ee.Feature(null, {matrix: cm_gbt.array()})

Export.table.toDrive({
  collection: ee.FeatureCollection(export_gbtm),
  description: 'ConfusionMatrix_GBT_' + date,
  folder: 'BA_Classification_6K_' + date,
  fileNamePrefix: 'ConfusionMatrix_GBT_' + date,
  fileFormat: 'CSV'
});

// Add visual comparison layers //////////////////////////////////////////////////////////

Map.addLayer(SG_l_60, {}, 'Befliegung 2023 <= 60%');
Map.addLayer(SG_m_60, {}, 'Befliegung 2023 > 60%');

var class_image = lc_cart.addBands(lc_rf).addBands(lc_svm).addBands(lc_knn).addBands(lc_gbt);
print(class_image.bandNames());

Export.image.toAsset({
  image: class_image,
  description: 'class_image_6K_' + date,
  assetId: 'projects/ee-maltespringer78/assets/Classifiers/class_image_6K_' + date,
  crs: 'EPSG:4326',
  scale: 10,
  maxPixels: 1e13,
});